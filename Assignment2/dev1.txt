Business Opportunity or Problem

1.	Describe the business opportunity or problem(s) this project addressed and how it related to the 
(internal or external) clientâ€™s needs. 

JPMC had various Lines of Businesses, which were separate entities within the organisation, 
Ex: Investment Banking, Equity Research, IT Risk and Security Management, etc.

Since the LoBs were separate entities, high risk LoBs (Ex: Research) wanted to monitor sharing of documents though email
(either intentionally or by accident) with other low risk LoBs and block high confidentiality documents, 
if they were being shared. JPMC's IT Risk and Security Management wanted to install Symantec Data Loss Prevention tool on
their email servers to do this. The DLP server would be configured block all attachments in emails going out to email 
ids in other LoBs and above certain threshold of confidentiality levels. 

As part of this initiative, JPMC needed a way of tagging the documents with 
information about what LoB it is from and confidentiality level of the document.

This tagging of documents was called 'watermarking' and is not related to the physical watermarking of documents.

TCS was selected to come up with a solution where a user can upload a document to the watermarking server,
get it watermarked, download it and then use it to share via email. 


This was implemented by us by providing a web site  front-end developed in C#.NET and the 
watermarking server in the back-end developed in Perl.


2.	Describe the scope and complexity of the problem. 

Scope:
1. The document could be any one of 
   a. MS Office documents 97-2003 versions to latest 2010 version, XPS documents
   b. PDF
   c. Audio/Video files - MP3, MP4, MPEG, etc.
   d. Image files - JPG, PNG, etc.
2. The solution should be available at least 24x5 for JPMC employees all over the world.

Complexity:
1. The watermarking solution was to be developed in Perl but was to be deployed on Windows servers. 
With Perl being more of a UNIX tool, developing on windows was a difficult task. 
2. For some document types, modules were available for writing to document properties but was buggy 
and not actively supported.
3. For document types like MS Office 2010, modules were not available at all. We developed our own modules.


3.	Describe your relationship and communications with client management / user management / end users. 
My role in this project was as below:
1. Discussing technical design decisions with JPMC Tech Lead.
2. Weekly meetings with the client management providing status reports on the project
3. 

Solution

1.	Discuss your contribution to the solution, project or engagement including the rationale behind key choices.  
Please enumerate the alternatives you considered and your reasons for their rejection.
My role in this project was Team Lead for the development of the Perl backend. This was the most critical part of the project.
Some of my key contributions were:
   a. Development of a backend server completely in Perl - We considered using other languages like C# or Java. Performance of 
   both these landguages are not as good as Perl in file management. Also, having a solution in compiled languages 
   meant more time spent in deployment of new updates and enhancements. Other interpreted languages like 
   Python/PHP had even lesser number of modules for interacting with the file types mentioned above. Thus the best solution 
   was in using Perl.
   b. Development of a complete testing framework with Perl for the watermarking solution - 
   c. Development of a new Perl module for editing properties of MS Office Documents of OpenXML type (version 2007 and later). 
   At the time of development, perl had no modules to edit OpenXML document. The only possible solution was to go with 
   This meant we had to go with C#.  
   But this also meant combining C# and Perl in the backend which would be a support team nightmare. So, I developed a 
   solution in Perl to do this by going through OpenXML specification. This solution is currently part of CPAN (Comprehensive 
   Perl Archive Network), the standard Perl repository for modules. 
   Link: http://search.cpan.org/dist/OpenXML-Properties/lib/OpenXML/Properties.pm
   

2.	Enumerate and describe the key decisions you made, and the reasons for making them as you did.
Some of my key decisions were:
a. Develop a Perl daemon server that waits for documents to be uploaded instead of calling a perl script 
for every document that was uploaded, thus saving a lot of system resources.
b. Communication between the web site and the perl server to happen through a MS Message Queue. 
The web site will send information about uploaded documents like path, type, etc., to the perl server through MSMQs. This ensured a 
continuous communication between the front-end and the watermarking server.



3.	Describe the design method you used on this project and the rationale for its selection.
Perl code was divided into server and watermarking modules. 
The Server: For each upload of a set files, the server would spawn a separate process to watermark the files. The process 
would go through the list of files and call appropriate modules to watermark.
Code to watermark each type of documents was separated out into modules. For example, we had separate modules for 
MS Office 2007 and later version documents, MS Office 97-2003 documents, PDF documents, Audio files, Video files 
and Image files. 


4.	List the design tools you selected for use on this project and discuss the rationale for their selection.

5.	List the major deliverables of the project that you were responsible for or contributed to, and 
summarize the reason for their inclusion.
   a. Perl Watermarking server design document
   b. Code for the perl watermarking server, 
   c. Server deployment instructions
   d. Test cases
   e. Test Plan and Test Strategy documents
   f. Support document
   

Results

1.	Was your solution implemented?  If so, describe the role, if any, you had in the implementation.  If not explain why not.

2.	Assess the overall success or failure of the project.  Comment on client satisfaction, attainment of objectives, and ultimate versus proposed cost and schedule.

Lessons Learned 

1. In retrospect, what might you have done differently on this project and what lessons did you learn?
   We spent quite a bit of time in finding ways to make the interaction between C#.NET and Perl work. In addition 
   to that, developing with Perl on windows meant that developing simple things like a daemon, which is trivial 
   on UNIX, became a major task on windows.
   In hindsight, we should have developed the whole solution, front-end and back-end, either completely in
   Perl on UNIX or completely in .NET on Windows. Mixing of technologies, though a wonderful learning experience, 
   was not hassle free.
   Unfortunately, the custormer wanted a .NET front-end and a scripting language based back-end, for which 
   Perl was the best choice.
